<!DOCTYPE hmtl>

<html>

  <head>

    <!-- ZingChart CDN script -->
    <script src="https://cdn.zingchart.com/zingchart.min.js"></script>

    <style>
      #chart {
        height: 1150px;
        width: 1750px;
      },
      #reload {
        background: #00BAF0;
        border: none;
        border-radius: 4px;
        color: white;
        cursor: pointer;
        font-size: 16px;
        padding: 4px 8px;
      }
    </style>

  </head>

  <body>

    <h1>Packets</h1>

    <!-- EJS loop through employees returned from MongoDB -->
    <ul>

      <!-- inserts each employee name/age from MongoDB to list -->
      <% pkts.forEach(pkt => { %>
      <li><%= `Time: ${pkt.DATE}, Protocol: ${pkt.PROTOCOL}` %></li>
      <% }); %>

    </ul>

    <!-- chart container -->
    <div id="chart"></div>
    <button id="reload"><i class="fa fa-refresh"></i>&nbsp;Replay Animation</button>


    <!-- fetches data from api/data page & renders chart from data returned -->
    <script>

      // creates variable for url we want to fetch
      const url = 'http://localhost:3000/api/data';

      // fetch call to our /api/data page
      fetch(url)

        // creates promise to work with response from /api/data
        .then(res => {

          // throws error if there is a problem fetching page
          if (!res.ok) {

            // returns error with response text of error
            throw new Error(res.statusText);

          }

          // returns data from /api/data page in json format to next promise
          return res.json();

        })

        // creates promise with returned data from previous promise
        .then(data => {

          // creates pkts variable to store JSON data form /api/data
          let pkts = data;
          
          
          //let pktCnT = [];
          //let pktCnU = [];

          //let tcp = data.filter(pr => pr.PROTOCOL == 17);
          //let udp = data.filter(pr => pr.PROTOCOL == 6 );

          // creates empty employeeInfo array
          let pktInfo= [];
          //let pktInfoU = [];
          //let pktCnT = [];
          //let pktCnU = [];
          //let tcp, udp;
          let pktInfo2 =[];
          //let pktInfo3 =[];
          //let pktInfo4 = [];

          // loops through data from employee variable
          pkts.forEach(pkt => {
            //let tp = (pkt.PROTOCOL == 6);
            //let up = (pkt.PROTOCOL == 17);

           //tcp = pkt.filter(pr => pr.Protocol == 17);
            //udp = pkt.filter(pr => pr.Protocol == 6 );

            // pushes values from employees variable to empty employeeInfo array
            pktInfo.push([Date.parse(pkt.DATE) , parseInt(pkt.PROTOCOL)]);
            //pktInfoU.push([Date.parse(pkt.DATE) , parseInt(up)]);
            pktInfo2.push([Date.parse(pkt.DATE) , parseInt(pkt.PROTOCOL) , parseInt(pktInfo.length)]);
            //pktInfo3.push([Date.parse(pkt.DATE) , parseInt(pkt.PROTOCOL) , parseInt(pktInfo.length)]);
            //pktInfo4.push([Date.parse(pkt.DATE) , parseInt(pktInfo.length)]);
            //pktInfo2.push([Date.parse(pkt.TIME) ,  parseInt(pktInfo.length)]);
            //pktInfo2.push([pktInfo, parseInt(pkt.Protocol.length)]);
            //pktCnT.push ([parseInt(pkt.Protocol: 6)]);
            //pktCnU.push ([parseInt(pkt.Protocol: 17)]);

          });

          // creates chart const with employeeInfo array
          const chart = {
            type: 'bubble',
            plot: {
              
            marker: { //Apply marker styling globally.
            'background-color': "#00FFFF",
            'border-color': "#009999",
            'border-width': 1,
            alpha:0.3
            },
            animation: {
              effect: 4,
              method: 0,
              sequence: 1
              }
              },

            
            
              series: [
              {
                values: pktInfo2
                
              
              }
            ],


            scaleX: {
             // 'min-value': 1602496397577,
             //'min-value': 1604214107000,
             //"min-value": 1603332000000,
            'max-value': 1605421685000,
              step: 'second',
        transform: {
          type: 'date',
          all: '%m/%d/%Y<br>%h:%i:%s:%q %A'
        }
      }
            
          };

          // renders zingchart to the page
          zingchart.render({
            id: 'chart',
            data: chart,
            height: '100%',
            width: '100%'
          });

          var reload = document.querySelector('#reload');
    if (reload) {
      reload.addEventListener('click', function() {
        zingchart.exec('chart', 'reload');
      });

    }

        })

        // catches errors in promise chain
        .catch(error => console.log('fetch error'));

  

    </script>

  </body>

</html>
